// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UretimPlanlamaKontrol.Repositories;

#nullable disable

namespace UretimPlanlamaKontrol.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Atolye", b =>
                {
                    b.Property<int>("AtolyeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AtolyeId"), 1L, 1);

                    b.Property<string>("AtolyeAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AtolyeId");

                    b.ToTable("Atolyeler");

                    b.HasData(
                        new
                        {
                            AtolyeId = 1,
                            AtolyeAdi = "MekanikAtolye"
                        },
                        new
                        {
                            AtolyeId = 2,
                            AtolyeAdi = "MontajAtolye"
                        },
                        new
                        {
                            AtolyeId = 3,
                            AtolyeAdi = "KablajAtolye"
                        },
                        new
                        {
                            AtolyeId = 4,
                            AtolyeAdi = "BoyaAtolye"
                        });
                });

            modelBuilder.Entity("Entities.Models.AtolyeIsler", b =>
                {
                    b.Property<int>("AtolyeIslerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AtolyeIslerId"), 1L, 1);

                    b.Property<int?>("AtolyeId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunMiktari")
                        .HasColumnType("int");

                    b.HasKey("AtolyeIslerId");

                    b.HasIndex("AtolyeId");

                    b.HasIndex("UrunId");

                    b.ToTable("AtolyeIsler");
                });

            modelBuilder.Entity("Entities.Models.Hammadde", b =>
                {
                    b.Property<int>("HammaddeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HammaddeId"), 1L, 1);

                    b.Property<decimal?>("AlisFiyati")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Birimi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HammaddeAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HammaddeMiktari")
                        .HasColumnType("int");

                    b.Property<string>("HammaddeResimUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KategoriId")
                        .HasColumnType("int");

                    b.Property<int?>("KullanimMiktari")
                        .HasColumnType("int");

                    b.Property<string>("OzetBilgi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.Property<bool>("Vitrin")
                        .HasColumnType("bit");

                    b.HasKey("HammaddeId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UrunId");

                    b.ToTable("Hammaddeler");

                    b.HasData(
                        new
                        {
                            HammaddeId = 1,
                            AlisFiyati = 560m,
                            Birimi = "Adet",
                            HammaddeAdi = "DFG KBRN Filtresiz Maske",
                            HammaddeMiktari = 0,
                            HammaddeResimUrl = "/images/1.jpg",
                            KategoriId = 1,
                            KullanimMiktari = 1,
                            UrunId = 1,
                            Vitrin = false
                        },
                        new
                        {
                            HammaddeId = 2,
                            AlisFiyati = 420m,
                            Birimi = "Adet",
                            HammaddeAdi = "DFG KBRN Gaz Maske Filtresi",
                            HammaddeMiktari = 0,
                            HammaddeResimUrl = "/images/2.jpg",
                            KategoriId = 1,
                            KullanimMiktari = 1,
                            UrunId = 1,
                            Vitrin = false
                        },
                        new
                        {
                            HammaddeId = 3,
                            AlisFiyati = 15m,
                            Birimi = "Adet",
                            HammaddeAdi = "M3 x 5 Yıldız Silindir Başlı (Ysb) Vida",
                            HammaddeMiktari = 0,
                            HammaddeResimUrl = "/images/3.jpg",
                            KategoriId = 2,
                            KullanimMiktari = 2,
                            UrunId = 1,
                            Vitrin = false
                        },
                        new
                        {
                            HammaddeId = 4,
                            AlisFiyati = 3m,
                            Birimi = "Adet",
                            HammaddeAdi = "M3 Somun",
                            HammaddeMiktari = 0,
                            HammaddeResimUrl = "/images/4.jpg",
                            KategoriId = 2,
                            KullanimMiktari = 2,
                            UrunId = 1,
                            Vitrin = false
                        });
                });

            modelBuilder.Entity("Entities.Models.HammaddeSiparis", b =>
                {
                    b.Property<int>("HammaddeSiparisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HammaddeSiparisId"), 1L, 1);

                    b.Property<int?>("HammaddeGelenAdet")
                        .HasColumnType("int");

                    b.Property<int?>("HammaddeId")
                        .HasColumnType("int");

                    b.Property<int?>("HammaddeSiparisAdedi")
                        .HasColumnType("int");

                    b.Property<string>("HammaddeSiparisBirimi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HammaddeSiparisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HammaddeTeslimTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TedarikciId")
                        .HasColumnType("int");

                    b.HasKey("HammaddeSiparisId");

                    b.HasIndex("HammaddeId");

                    b.HasIndex("TedarikciId");

                    b.ToTable("HammaddeSiparis");
                });

            modelBuilder.Entity("Entities.Models.Kategori", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"), 1L, 1);

                    b.Property<string>("KategoriAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategoriId");

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            KategoriId = 1,
                            KategoriAdi = "Maske"
                        },
                        new
                        {
                            KategoriId = 2,
                            KategoriAdi = "Sarf"
                        });
                });

            modelBuilder.Entity("Entities.Models.Musteri", b =>
                {
                    b.Property<int>("MusteriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusteriId"), 1L, 1);

                    b.Property<string>("MusteriAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MusteriId");

                    b.ToTable("Musteriler");

                    b.HasData(
                        new
                        {
                            MusteriId = 1,
                            MusteriAdi = "FNSS"
                        },
                        new
                        {
                            MusteriId = 2,
                            MusteriAdi = "BMC"
                        });
                });

            modelBuilder.Entity("Entities.Models.Planlama", b =>
                {
                    b.Property<int>("PlanlamaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanlamaId"), 1L, 1);

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunMiktari")
                        .HasColumnType("int");

                    b.Property<int?>("UrunSiparisId")
                        .HasColumnType("int");

                    b.HasKey("PlanlamaId");

                    b.HasIndex("UrunId")
                        .IsUnique()
                        .HasFilter("[UrunId] IS NOT NULL");

                    b.HasIndex("UrunSiparisId");

                    b.ToTable("Planlama");
                });

            modelBuilder.Entity("Entities.Models.PlanLine", b =>
                {
                    b.Property<int>("PlanLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanLineId"), 1L, 1);

                    b.Property<int>("HammaddeId")
                        .HasColumnType("int");

                    b.Property<int>("Miktar")
                        .HasColumnType("int");

                    b.Property<int?>("SiparisId")
                        .HasColumnType("int");

                    b.HasKey("PlanLineId");

                    b.HasIndex("HammaddeId");

                    b.HasIndex("SiparisId");

                    b.ToTable("PlanLine");
                });

            modelBuilder.Entity("Entities.Models.Proje", b =>
                {
                    b.Property<int>("ProjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjeId"), 1L, 1);

                    b.Property<string>("ProjeAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("ProjeId");

                    b.ToTable("Projeler");

                    b.HasData(
                        new
                        {
                            ProjeId = 1,
                            ProjeAdi = "PARS ALPHA 8x8"
                        },
                        new
                        {
                            ProjeId = 2,
                            ProjeAdi = "ALTUĞ 8X8 ZMA"
                        });
                });

            modelBuilder.Entity("Entities.Models.Rota", b =>
                {
                    b.Property<int>("RotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaId"), 1L, 1);

                    b.Property<int>("AtolyeId")
                        .HasColumnType("int");

                    b.Property<int?>("IslemSure")
                        .HasColumnType("int");

                    b.Property<int>("IslemSırası")
                        .HasColumnType("int");

                    b.Property<int?>("PlanlamaId")
                        .HasColumnType("int");

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("RotaId");

                    b.HasIndex("AtolyeId");

                    b.HasIndex("PlanlamaId");

                    b.HasIndex("UrunId");

                    b.ToTable("Rotalar");

                    b.HasData(
                        new
                        {
                            RotaId = 1,
                            AtolyeId = 3,
                            IslemSure = 40,
                            IslemSırası = 1,
                            UrunId = 1
                        },
                        new
                        {
                            RotaId = 2,
                            AtolyeId = 2,
                            IslemSure = 30,
                            IslemSırası = 2,
                            UrunId = 1
                        },
                        new
                        {
                            RotaId = 3,
                            AtolyeId = 4,
                            IslemSure = 20,
                            IslemSırası = 3,
                            UrunId = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.Siparis", b =>
                {
                    b.Property<int>("SiparisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiparisId"), 1L, 1);

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alan1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alan2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alan3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HediyePaketi")
                        .HasColumnType("bit");

                    b.Property<bool>("KargoDurumu")
                        .HasColumnType("bit");

                    b.Property<string>("Sehir")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SiparisTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("SiparisId");

                    b.ToTable("Siparisler");
                });

            modelBuilder.Entity("Entities.Models.Tedarikci", b =>
                {
                    b.Property<int>("TedarikciId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TedarikciId"), 1L, 1);

                    b.Property<string>("TedarikciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TedarikciId");

                    b.ToTable("Tedarikciler");

                    b.HasData(
                        new
                        {
                            TedarikciId = 1,
                            TedarikciAdi = "Ismont"
                        },
                        new
                        {
                            TedarikciId = 2,
                            TedarikciAdi = "Kaya Yapı Market"
                        });
                });

            modelBuilder.Entity("Entities.Models.Urun", b =>
                {
                    b.Property<int>("UrunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrunId"), 1L, 1);

                    b.Property<string>("IsEmrı")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjeId")
                        .HasColumnType("int");

                    b.Property<int?>("SatisFiyati")
                        .HasColumnType("int");

                    b.Property<string>("UrunAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UrunMiktari")
                        .HasColumnType("int");

                    b.Property<string>("UrunResimUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UrunId");

                    b.HasIndex("ProjeId");

                    b.ToTable("Urunler");

                    b.HasData(
                        new
                        {
                            UrunId = 1,
                            ProjeId = 1,
                            SatisFiyati = 4300,
                            UrunAdi = "DFG KBRN Gaz Maskesi",
                            UrunMiktari = 0,
                            UrunResimUrl = "/images/5.jpg"
                        });
                });

            modelBuilder.Entity("Entities.Models.UrunSiparis", b =>
                {
                    b.Property<int>("UrunSiparisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrunSiparisId"), 1L, 1);

                    b.Property<int?>("MusteriId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjeId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunSiparisAdedi")
                        .HasColumnType("int");

                    b.Property<string>("UrunSiparisBirimi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UrunSiparisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UrunTeslimMiktari")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UrunTeslimTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("UrunSiparisId");

                    b.HasIndex("MusteriId");

                    b.HasIndex("ProjeId");

                    b.HasIndex("UrunId")
                        .IsUnique()
                        .HasFilter("[UrunId] IS NOT NULL");

                    b.ToTable("UrunSiparis");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "91ba00fd-bf1a-4903-9014-4c7bf24a191d",
                            ConcurrencyStamp = "6b00fbf3-2d07-4d68-a6e7-0cae3003675d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "e6ebc1ce-c7d4-48ac-bd1a-fe5d36a2bd76",
                            ConcurrencyStamp = "cd7f5036-2192-4253-a5b8-777284a2fb86",
                            Name = "Yonetici",
                            NormalizedName = "YONETICI"
                        },
                        new
                        {
                            Id = "8cd8d518-283c-4d9a-b909-54603575068f",
                            ConcurrencyStamp = "c1bafa2b-36aa-40e3-9b07-59cb50938d8a",
                            Name = "Proje",
                            NormalizedName = "PROJE"
                        },
                        new
                        {
                            Id = "b6f787fa-5276-4013-8dd4-0d6803417ea9",
                            ConcurrencyStamp = "3a76ea67-d0bf-4e1a-951b-d7d40b1af241",
                            Name = "Planlama",
                            NormalizedName = "PLANLAMA"
                        },
                        new
                        {
                            Id = "88ff616e-194e-45ba-b4bc-74161d8eba06",
                            ConcurrencyStamp = "1727f321-a29b-4fba-b279-f8d0e49affa6",
                            Name = "Kalite",
                            NormalizedName = "KALITE"
                        },
                        new
                        {
                            Id = "1287bd3a-5184-4948-a2af-b003b616bbaa",
                            ConcurrencyStamp = "bcdee8ea-9ff6-4e96-b429-8e1587d7576b",
                            Name = "SatinAlma",
                            NormalizedName = "SATINALMA"
                        },
                        new
                        {
                            Id = "33738160-84e6-46be-88aa-73338c4f7363",
                            ConcurrencyStamp = "e4105fa4-6610-47b4-8cbd-52633acecbc7",
                            Name = "Depo",
                            NormalizedName = "DEPO"
                        },
                        new
                        {
                            Id = "65d09a38-bf60-4024-b34c-308fd436b678",
                            ConcurrencyStamp = "eb780ca3-ba0a-4c26-a72c-809f6b3729bf",
                            Name = "MekanikAtolye",
                            NormalizedName = "MEKANIKATOLYE"
                        },
                        new
                        {
                            Id = "5ef836b4-5fa7-47a9-b1be-6c29349b1567",
                            ConcurrencyStamp = "115d95bd-0c5b-4e5f-8498-699eb1ea7d5f",
                            Name = "MontajAtolye",
                            NormalizedName = "MONTAJATOLYE"
                        },
                        new
                        {
                            Id = "9ca6f1c9-2f1b-415e-a689-4891f5afd5e9",
                            ConcurrencyStamp = "b8700f7e-0e3f-4d76-b372-d59861bbe42a",
                            Name = "KablajAtolye",
                            NormalizedName = "KABLAJATOLYE"
                        },
                        new
                        {
                            Id = "35778a4a-0e99-4ba6-ab7f-0b713ce8645a",
                            ConcurrencyStamp = "4280c011-9955-48c0-850c-c847644ef99b",
                            Name = "BoyaAtolye",
                            NormalizedName = "BOYAATOLYE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.AtolyeIsler", b =>
                {
                    b.HasOne("Entities.Models.Atolye", "Atolye")
                        .WithMany("AtolyeIsler")
                        .HasForeignKey("AtolyeId");

                    b.HasOne("Entities.Models.Urun", "Urun")
                        .WithMany("AtolyeIsler")
                        .HasForeignKey("UrunId");

                    b.Navigation("Atolye");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("Entities.Models.Hammadde", b =>
                {
                    b.HasOne("Entities.Models.Kategori", "Kategori")
                        .WithMany("Hammaddeler")
                        .HasForeignKey("KategoriId");

                    b.HasOne("Entities.Models.Urun", "Urun")
                        .WithMany("Hammaddeler")
                        .HasForeignKey("UrunId");

                    b.Navigation("Kategori");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("Entities.Models.HammaddeSiparis", b =>
                {
                    b.HasOne("Entities.Models.Hammadde", "Hammadde")
                        .WithMany("HammaddeSiparisler")
                        .HasForeignKey("HammaddeId");

                    b.HasOne("Entities.Models.Tedarikci", "Tedarikci")
                        .WithMany("HammaddeSiparisleri")
                        .HasForeignKey("TedarikciId");

                    b.Navigation("Hammadde");

                    b.Navigation("Tedarikci");
                });

            modelBuilder.Entity("Entities.Models.Planlama", b =>
                {
                    b.HasOne("Entities.Models.Urun", "Urun")
                        .WithOne("Planlama")
                        .HasForeignKey("Entities.Models.Planlama", "UrunId");

                    b.HasOne("Entities.Models.UrunSiparis", "UrunSiparis")
                        .WithMany()
                        .HasForeignKey("UrunSiparisId");

                    b.Navigation("Urun");

                    b.Navigation("UrunSiparis");
                });

            modelBuilder.Entity("Entities.Models.PlanLine", b =>
                {
                    b.HasOne("Entities.Models.Hammadde", "Hammadde")
                        .WithMany()
                        .HasForeignKey("HammaddeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Siparis", null)
                        .WithMany("Lines")
                        .HasForeignKey("SiparisId");

                    b.Navigation("Hammadde");
                });

            modelBuilder.Entity("Entities.Models.Rota", b =>
                {
                    b.HasOne("Entities.Models.Atolye", "Atolye")
                        .WithMany("Rotalar")
                        .HasForeignKey("AtolyeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Planlama", "Planlama")
                        .WithMany("Rotalar")
                        .HasForeignKey("PlanlamaId");

                    b.HasOne("Entities.Models.Urun", "Urun")
                        .WithMany("Rotalar")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atolye");

                    b.Navigation("Planlama");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("Entities.Models.Urun", b =>
                {
                    b.HasOne("Entities.Models.Proje", "Proje")
                        .WithMany("Urunler")
                        .HasForeignKey("ProjeId");

                    b.Navigation("Proje");
                });

            modelBuilder.Entity("Entities.Models.UrunSiparis", b =>
                {
                    b.HasOne("Entities.Models.Musteri", "Musteri")
                        .WithMany("UrunSiparisleri")
                        .HasForeignKey("MusteriId");

                    b.HasOne("Entities.Models.Proje", "Proje")
                        .WithMany()
                        .HasForeignKey("ProjeId");

                    b.HasOne("Entities.Models.Urun", "Urun")
                        .WithOne("UrunSiparis")
                        .HasForeignKey("Entities.Models.UrunSiparis", "UrunId");

                    b.Navigation("Musteri");

                    b.Navigation("Proje");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Atolye", b =>
                {
                    b.Navigation("AtolyeIsler");

                    b.Navigation("Rotalar");
                });

            modelBuilder.Entity("Entities.Models.Hammadde", b =>
                {
                    b.Navigation("HammaddeSiparisler");
                });

            modelBuilder.Entity("Entities.Models.Kategori", b =>
                {
                    b.Navigation("Hammaddeler");
                });

            modelBuilder.Entity("Entities.Models.Musteri", b =>
                {
                    b.Navigation("UrunSiparisleri");
                });

            modelBuilder.Entity("Entities.Models.Planlama", b =>
                {
                    b.Navigation("Rotalar");
                });

            modelBuilder.Entity("Entities.Models.Proje", b =>
                {
                    b.Navigation("Urunler");
                });

            modelBuilder.Entity("Entities.Models.Siparis", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Entities.Models.Tedarikci", b =>
                {
                    b.Navigation("HammaddeSiparisleri");
                });

            modelBuilder.Entity("Entities.Models.Urun", b =>
                {
                    b.Navigation("AtolyeIsler");

                    b.Navigation("Hammaddeler");

                    b.Navigation("Planlama");

                    b.Navigation("Rotalar");

                    b.Navigation("UrunSiparis");
                });
#pragma warning restore 612, 618
        }
    }
}
